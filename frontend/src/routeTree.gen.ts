/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as SearchRouteImport } from './routes/search'
import { Route as PeopleRouteImport } from './routes/people'
import { Route as AddRouteImport } from './routes/add'
import { Route as IndexRouteImport } from './routes/index'
import { Route as TreePersonIdRouteImport } from './routes/tree.$personId'
import { Route as PersonPersonIdRouteImport } from './routes/person.$personId'
import { Route as EditPersonIdRouteImport } from './routes/edit.$personId'

const SearchRoute = SearchRouteImport.update({
  id: '/search',
  path: '/search',
  getParentRoute: () => rootRouteImport,
} as any)
const PeopleRoute = PeopleRouteImport.update({
  id: '/people',
  path: '/people',
  getParentRoute: () => rootRouteImport,
} as any)
const AddRoute = AddRouteImport.update({
  id: '/add',
  path: '/add',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const TreePersonIdRoute = TreePersonIdRouteImport.update({
  id: '/tree/$personId',
  path: '/tree/$personId',
  getParentRoute: () => rootRouteImport,
} as any)
const PersonPersonIdRoute = PersonPersonIdRouteImport.update({
  id: '/person/$personId',
  path: '/person/$personId',
  getParentRoute: () => rootRouteImport,
} as any)
const EditPersonIdRoute = EditPersonIdRouteImport.update({
  id: '/edit/$personId',
  path: '/edit/$personId',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/add': typeof AddRoute
  '/people': typeof PeopleRoute
  '/search': typeof SearchRoute
  '/edit/$personId': typeof EditPersonIdRoute
  '/person/$personId': typeof PersonPersonIdRoute
  '/tree/$personId': typeof TreePersonIdRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/add': typeof AddRoute
  '/people': typeof PeopleRoute
  '/search': typeof SearchRoute
  '/edit/$personId': typeof EditPersonIdRoute
  '/person/$personId': typeof PersonPersonIdRoute
  '/tree/$personId': typeof TreePersonIdRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/add': typeof AddRoute
  '/people': typeof PeopleRoute
  '/search': typeof SearchRoute
  '/edit/$personId': typeof EditPersonIdRoute
  '/person/$personId': typeof PersonPersonIdRoute
  '/tree/$personId': typeof TreePersonIdRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/add'
    | '/people'
    | '/search'
    | '/edit/$personId'
    | '/person/$personId'
    | '/tree/$personId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/add'
    | '/people'
    | '/search'
    | '/edit/$personId'
    | '/person/$personId'
    | '/tree/$personId'
  id:
    | '__root__'
    | '/'
    | '/add'
    | '/people'
    | '/search'
    | '/edit/$personId'
    | '/person/$personId'
    | '/tree/$personId'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  AddRoute: typeof AddRoute
  PeopleRoute: typeof PeopleRoute
  SearchRoute: typeof SearchRoute
  EditPersonIdRoute: typeof EditPersonIdRoute
  PersonPersonIdRoute: typeof PersonPersonIdRoute
  TreePersonIdRoute: typeof TreePersonIdRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/search': {
      id: '/search'
      path: '/search'
      fullPath: '/search'
      preLoaderRoute: typeof SearchRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/people': {
      id: '/people'
      path: '/people'
      fullPath: '/people'
      preLoaderRoute: typeof PeopleRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/add': {
      id: '/add'
      path: '/add'
      fullPath: '/add'
      preLoaderRoute: typeof AddRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/tree/$personId': {
      id: '/tree/$personId'
      path: '/tree/$personId'
      fullPath: '/tree/$personId'
      preLoaderRoute: typeof TreePersonIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/person/$personId': {
      id: '/person/$personId'
      path: '/person/$personId'
      fullPath: '/person/$personId'
      preLoaderRoute: typeof PersonPersonIdRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/edit/$personId': {
      id: '/edit/$personId'
      path: '/edit/$personId'
      fullPath: '/edit/$personId'
      preLoaderRoute: typeof EditPersonIdRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  AddRoute: AddRoute,
  PeopleRoute: PeopleRoute,
  SearchRoute: SearchRoute,
  EditPersonIdRoute: EditPersonIdRoute,
  PersonPersonIdRoute: PersonPersonIdRoute,
  TreePersonIdRoute: TreePersonIdRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
